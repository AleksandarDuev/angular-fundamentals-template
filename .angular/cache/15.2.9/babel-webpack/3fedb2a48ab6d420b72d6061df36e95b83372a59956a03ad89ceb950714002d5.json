{"ast":null,"code":"import { combineLatest, debounceTime, filter, forkJoin, map, Subject, switchMap } from \"rxjs\";\nexport class AppComponent {\n  constructor(mockDataService) {\n    this.mockDataService = mockDataService;\n    this.searchTermByCharacters = new Subject();\n    this.isLoading = false;\n    this.subscriptions = [];\n  }\n  ngOnInit() {\n    this.initLoadingState();\n    this.initCharacterEvents();\n  }\n  changeCharactersInput(element) {\n    // 1.1. Add functionality to changeCharactersInput method. Changes searchTermByCharacters Subject value on input change.\n    const inputValue = element.target.value;\n    // YOUR CODE STARTS HERE\n    this.searchTermByCharacters.next(inputValue);\n    // YOUR CODE ENDS HERE\n  }\n\n  initCharacterEvents() {\n    // 1.2. Add API call on each user input. Use mockDataService.getCharacters - to make get request.\n    // 2. Since we don't want to spam our service add filter by input value and do not call API until a user enters at least 3 chars.\n    // 3. Add debounce to prevent API calls until user stop typing.\n    this.charactersResults$ = this.searchTermByCharacters.pipe(\n    // YOUR CODE STARTS HERE\n    switchMap(searchTerm => this.mockDataService.getCharacters(searchTerm)),\n    // Trigger the API call\n    filter(inputValue => inputValue.length >= 3),\n    // Only proceed if input has at least 3 characters);\n    debounceTime(300) // Add debounce to avoid API calls during fast typing\n    ); // YOUR CODE ENDS HERE\n  }\n\n  loadCharactersAndPlanet() {\n    // 4. On clicking the button 'Load Characters And Planets', it is necessary to process two requests and combine the results of both requests into one result array. As a result, a list with the names of the characters and the names of the planets is displayed on the screen.\n    // Your code should looks like this: this.planetAndCharactersResults$ = /* Your code */\n    // YOUR CODE STARTS HERE\n    // YOUR CODE ENDS HERE\n    this.planetAndCharactersResults$ = forkJoin({\n      characters: this.mockDataService.getCharacters(),\n      planets: this.mockDataService.getPlanets()\n    }).pipe(map(({\n      characters,\n      planets\n    }) => {\n      //Combine the names from both characters and planets into one result array\n      return [...characters.map(char => char.name), ...planets.map(planet => planet.name)];\n    }));\n  }\n  initLoadingState() {\n    /* 5.1. Let's add loader logic to our page. For each request, we have an observable that contains the state of the request. When we send a request the value is true, when the request is completed, the value becomes false. You can get value data with mockDataService.getCharactersLoader() and mockDataService.getPlanetLoader().\r\n    - Combine the value of each of the streams.\r\n    - Subscribe to changes\r\n    - Check the received value using the areAllValuesTrue function and pass them to the isLoading variable. */\n    // YOUR CODE STARTS HERE\n    combineLatest([this.mockDataService.getCharactersLoader(), this.mockDataService.getPlanetLoader()]).pipe(map(loadingStates => this.areAllValuesTrue(loadingStates)) // Check if all streams are true\n    ).subscribe(loading => {\n      this.isLoading = loading; // Set the isLoading flag\n    });\n    // YOUR CODE ENDS HERE\n  }\n\n  ngOnDestroy() {\n    // 5.2 Unsubscribe from all subscriptions\n    // YOUR CODE STARTS HERE\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    // YOUR CODE ENDS HERE\n  }\n\n  areAllValuesTrue(elements) {\n    return elements.every(el => el);\n  }\n}","map":{"version":3,"mappings":"AACA,SACIA,aAAa,EACbC,YAAY,EACZC,MAAM,EACNC,QAAQ,EACRC,GAAG,EAEHC,OAAO,EAEPC,SAAS,QACN,MAAM;AAmCb,OAAM,MAAOC,YAAY;EAOrBC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;IANnC,2BAAsB,GAAG,IAAIJ,OAAO,EAAU;IAG9C,cAAS,GAAY,KAAK;IAC1B,kBAAa,GAAmB,EAAE;EAEqB;EAEvDK,QAAQ;IACJ,IAAI,CAACC,gBAAgB,EAAE;IACvB,IAAI,CAACC,mBAAmB,EAAE;EAC9B;EAEAC,qBAAqB,CAACC,OAAY;IAC9B;IACA,MAAMC,UAAU,GAAWD,OAAO,CAACE,MAAM,CAACC,KAAK;IAC/C;IACA,IAAI,CAACC,sBAAsB,CAACC,IAAI,CAACJ,UAAU,CAAC;IAC5C;EACJ;;EAEAH,mBAAmB;IACf;IAEA;IAEA;IAEA,IAAI,CAACQ,kBAAkB,GAAG,IAAI,CAACF,sBAAsB,CAACG,IAAI;IACtD;IACAf,SAAS,CAAEgB,UAAU,IACjB,IAAI,CAACb,eAAe,CAACc,aAAa,CAACD,UAAU,CAAC,CACjD;IAAE;IACHpB,MAAM,CAAEa,UAAU,IAAKA,UAAU,CAACS,MAAM,IAAI,CAAC,CAAC;IAAE;IAChDvB,YAAY,CAAC,GAAG,CAAC,CAAC;IAAA,CACrB,CAAC,CAAC;EACP;;EAEAwB,uBAAuB;IACnB;IACA;IACA;IACA;IACA,IAAI,CAACC,2BAA2B,GAAGvB,QAAQ,CAAC;MACxCwB,UAAU,EAAE,IAAI,CAAClB,eAAe,CAACc,aAAa,EAAE;MAChDK,OAAO,EAAE,IAAI,CAACnB,eAAe,CAACoB,UAAU;KAC3C,CAAC,CAACR,IAAI,CACHjB,GAAG,CAAC,CAAC;MAAEuB,UAAU;MAAEC;IAAO,CAAE,KAAI;MAE9B;MACE,OAAO,CACH,GAAGD,UAAU,CAACvB,GAAG,CAAE0B,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,EACtC,GAAGH,OAAO,CAACxB,GAAG,CAAE4B,MAAM,IAAKA,MAAM,CAACD,IAAI,CAAC,CAC1C;IACL,CAAC,CAAC,CACL;EACL;EAEApB,gBAAgB;IACZ;;;;IAKA;IACAX,aAAa,CAAC,CACV,IAAI,CAACS,eAAe,CAACwB,mBAAmB,EAAE,EAC1C,IAAI,CAACxB,eAAe,CAACyB,eAAe,EAAE,CACzC,CAAC,CACGb,IAAI,CACDjB,GAAG,CAAE+B,aAAwB,IACzB,IAAI,CAACC,gBAAgB,CAACD,aAAa,CAAC,CACvC,CAAC;IAAA,CACL,CACAE,SAAS,CAAEC,OAAgB,IAAI;MAC5B,IAAI,CAACC,SAAS,GAAGD,OAAO,CAAC,CAAC;IAC9B,CAAC,CAAC;IACN;EACJ;;EAEAE,WAAW;IACP;IACA;IACA,IAAI,CAACC,aAAa,CAACC,OAAO,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,EAAE,CAAC;IACtD;EACJ;;EAEAR,gBAAgB,CAACS,QAAmB;IAChC,OAAOA,QAAQ,CAACC,KAAK,CAAEC,EAAE,IAAKA,EAAE,CAAC;EACrC","names":["combineLatest","debounceTime","filter","forkJoin","map","Subject","switchMap","AppComponent","constructor","mockDataService","ngOnInit","initLoadingState","initCharacterEvents","changeCharactersInput","element","inputValue","target","value","searchTermByCharacters","next","charactersResults$","pipe","searchTerm","getCharacters","length","loadCharactersAndPlanet","planetAndCharactersResults$","characters","planets","getPlanets","char","name","planet","getCharactersLoader","getPlanetLoader","loadingStates","areAllValuesTrue","subscribe","loading","isLoading","ngOnDestroy","subscriptions","forEach","sub","unsubscribe","elements","every","el"],"sourceRoot":"","sources":["C:\\Users\\Duev\\Desktop\\EPAM-ACADEMY\\FRONT-END-SPECIALIZATION\\ANGULAR\\angular-fundamentals-template\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport {\r\n    combineLatest,\r\n    debounceTime,\r\n    filter,\r\n    forkJoin,\r\n    map,\r\n    Observable,\r\n    Subject,\r\n    Subscription,\r\n    switchMap,\r\n} from \"rxjs\";\r\nimport { MockDataService } from \"./mock-data.service\";\r\n\r\n@Component({\r\n    selector: \"app-root\",\r\n    templateUrl: \"./app.component.html\",\r\n    styleUrls: [\"./app.component.scss\"],\r\n})\r\n\r\ninterface Character{\r\nname: string;\r\n\theight: string;\r\n\tmass: string;\r\n\thair_color: string;\r\n\tskin_color: string;\r\n\teye_color: string;\r\n\tbirth_year:string;\r\n\tgender: string;\r\nhomeworld:string[],\r\n\tspecies:string[]\r\n\t\t\r\n\t,\r\n\t\"vehicles\": [\r\n\t\t\"https://swapi.dev/api/vehicles/14/\",\r\n\t\t\"https://swapi.dev/api/vehicles/30/\"\r\n\t],\r\n\t\"starships\": [\r\n\t\t\"https://swapi.dev/api/starships/12/\",\r\n\t\t\"https://swapi.dev/api/starships/22/\"\r\n\t],\r\n\t\"created\": \"2014-12-09T13:50:51.644000Z\",\r\n\t\"edited\": \"2014-12-20T21:17:56.891000Z\",\r\n\t\"url\": \"https://swapi.dev/api/people/1/\"\r\n}\r\n\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n    searchTermByCharacters = new Subject<string>();\r\n    charactersResults$!: Observable<any>;\r\n    planetAndCharactersResults$!: Observable<any>;\r\n    isLoading: boolean = false;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(private mockDataService: MockDataService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.initLoadingState();\r\n        this.initCharacterEvents();\r\n    }\r\n\r\n    changeCharactersInput(element: any): void {\r\n        // 1.1. Add functionality to changeCharactersInput method. Changes searchTermByCharacters Subject value on input change.\r\n        const inputValue: string = element.target.value;\r\n        // YOUR CODE STARTS HERE\r\n        this.searchTermByCharacters.next(inputValue);\r\n        // YOUR CODE ENDS HERE\r\n    }\r\n\r\n    initCharacterEvents(): void {\r\n        // 1.2. Add API call on each user input. Use mockDataService.getCharacters - to make get request.\r\n\r\n        // 2. Since we don't want to spam our service add filter by input value and do not call API until a user enters at least 3 chars.\r\n\r\n        // 3. Add debounce to prevent API calls until user stop typing.\r\n\r\n        this.charactersResults$ = this.searchTermByCharacters.pipe(\r\n            // YOUR CODE STARTS HERE\r\n            switchMap((searchTerm) =>\r\n                this.mockDataService.getCharacters(searchTerm)\r\n            ), // Trigger the API call\r\n            filter((inputValue) => inputValue.length >= 3), // Only proceed if input has at least 3 characters);\r\n            debounceTime(300) // Add debounce to avoid API calls during fast typing\r\n        ); // YOUR CODE ENDS HERE\r\n    }\r\n\r\n    loadCharactersAndPlanet(): void {\r\n        // 4. On clicking the button 'Load Characters And Planets', it is necessary to process two requests and combine the results of both requests into one result array. As a result, a list with the names of the characters and the names of the planets is displayed on the screen.\r\n        // Your code should looks like this: this.planetAndCharactersResults$ = /* Your code */\r\n        // YOUR CODE STARTS HERE\r\n        // YOUR CODE ENDS HERE\r\n        this.planetAndCharactersResults$ = forkJoin({\r\n            characters: this.mockDataService.getCharacters(),\r\n            planets: this.mockDataService.getPlanets(),\r\n        }).pipe(\r\n            map(({ characters, planets }) => {\r\n              \r\n              //Combine the names from both characters and planets into one result array\r\n                return [\r\n                    ...characters.map((char) => char.name),\r\n                    ...planets.map((planet) => planet.name),\r\n                ];\r\n            })\r\n        );\r\n    }\r\n\r\n    initLoadingState(): void {\r\n        /* 5.1. Let's add loader logic to our page. For each request, we have an observable that contains the state of the request. When we send a request the value is true, when the request is completed, the value becomes false. You can get value data with mockDataService.getCharactersLoader() and mockDataService.getPlanetLoader().\r\n\r\n    - Combine the value of each of the streams.\r\n    - Subscribe to changes\r\n    - Check the received value using the areAllValuesTrue function and pass them to the isLoading variable. */\r\n        // YOUR CODE STARTS HERE\r\n        combineLatest([\r\n            this.mockDataService.getCharactersLoader(),\r\n            this.mockDataService.getPlanetLoader(),\r\n        ])\r\n            .pipe(\r\n                map((loadingStates: boolean[]) =>\r\n                    this.areAllValuesTrue(loadingStates)\r\n                ) // Check if all streams are true\r\n            )\r\n            .subscribe((loading: boolean) => {\r\n                this.isLoading = loading; // Set the isLoading flag\r\n            });\r\n        // YOUR CODE ENDS HERE\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        // 5.2 Unsubscribe from all subscriptions\r\n        // YOUR CODE STARTS HERE\r\n        this.subscriptions.forEach((sub) => sub.unsubscribe());\r\n        // YOUR CODE ENDS HERE\r\n    }\r\n\r\n    areAllValuesTrue(elements: boolean[]): boolean {\r\n        return elements.every((el) => el);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}